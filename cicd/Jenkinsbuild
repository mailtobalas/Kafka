pipeline {
    agent any
    tools
            {
                maven "MAVEN"
            }
    stages {
        stage('checkout') {

            steps {
                sh 'echo checkout'
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          extensions: [],
                          userRemoteConfigs: [[url: 'https://github.com/mailtobalas/Kafka.git']]])
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('code quality') {
            steps
                    {
                      script {
                          echo "code quality"
                          def command = "python3 -c 'from cicd.falcon import *; gen_build_command(change_set=[])'"
                          def mvn_command = sh(returnStdout: true, script: command)
                          //echo mvn_command
                          codeQualityCheck("${mvn_command}")
                      }
                    }
        } // stage code quality ends

    }
    post {
        always {
            echo 'Cleanup after everything!'
        }
    }
}


// code quality --> mvn clean install
def codeQualityCheck(def command) {
    println "the command is $command"
    sh(script: command)
    recordIssues enabledForFailure: false, failedTotalAll: '150', failedTotalHigh: '40', failedTotalNormal: '40', failedTotalLow: '20', tool: spotBugs(pattern: '**/spotbugsXml.xml')
    recordIssues enabledForFailure: false, failedTotalAll: '150', failedTotalHigh: '40', failedTotalNormal: '150', failedTotalLow: '20', tool: pmdParser(pattern: '**/target/pmd.xml')
    //cucumber '**/target/cucumber/**/*.json'
    //TODO step([$class: 'AnalysisPublisher', canComputeNew: false, defaultEncoding: '', healthy: '', unHealthy: ''])
    // junit '**/target/clover/surefire-reports/**/*.xml'
    /*step([
            $class: 'CloverPublisher',
            cloverReportDir: 'target/site',
            cloverReportFileName: 'clover.xml',
            healthyTarget: [methodCoverage: 60, conditionalCoverage: 40, statementCoverage: 60], // optional, default is: method=70, conditional=80, statement=80
            unhealthyTarget: [methodCoverage: 55, conditionalCoverage: 30, statementCoverage: 55], // optional, default is none
//            failingTarget: [methodCoverage: 50, conditionalCoverage: 20, statementCoverage: 50]     // optional, default is none
   // ])*/
}
